### COMMON DATA TYPES ###

# 32-byte BLAKE3 hash
type Blake3Digest32 data[32]

# Hash digest
type Digest union { Blake3Digest32 }

# ChaCha20 key
type ChaCha20Key data[32]

# Symmetric key
type SymKey union { ChaCha20Key }

# Curve25519 public key
type Curve25519PubKey data[32]

# Curve25519 private key
type Curve25519PrivKey data[32]

# Public key
type PubKey union { Curve25519PubKey }

# Private key
type PrivKey union { Curve25519PrivKey }

# Ed25519 signature
type Ed25519Sig data[64]

# Cryptographic signature
type Signature union { Ed25519Sig }

# Timestamp: absolute time in minutes since 2022-02-22 22:22 UTC
type Timestamp u32

# Relative time in seconds
type Seconds u8

# Relative time in minutes
type Minutes u8

# Relative time in hours
type Hours u8

# Relative time in days
type Days u8

# Relative time (e.g. delay from current time)
type RelTime union {
  | Seconds | Minutes | Hours | Days
}

### STORAGE OBJECTS ###

# Object ID
# BLAKE3 hash over the serialized Object with encrypted content
type ObjectId Digest

# Object reference
type ObjectRef struct {
  # Object ID
  id: ObjectId

  # Key for decrypting the Object
  key: SymKey
}

# Internal node of a Merkle tree
type InternalNode list<SymKey>

# Data chunk at a leaf of a Merkle tree
type DataChunk data

# Content of an Object
type ObjectContent union {
  # Internal node with references to children
  | InternalNode

  # Leaf node with encrypted data chunk
  | DataChunk
}

# List of ObjectId dependencies as encrypted Object content
type DepList union {
  list<ObjectId>
}

# Dependencies of an Object
type ObjectDeps union {
  # List of Object IDs (max. 8),
  | list<ObjectId>

  # Reference to an Object that contains a DepList
  | ObjectRef
}

# Immutable object with an encrypted chunk of data.
# Data is chunked and stored in a Merkle tree.
type ObjectV0 struct {
  # Objects IDs for child nodes in the Merkle tree
  children: list<ObjectId>

  # Other objects this object depends on (e.g. Commit deps & acks)
  deps: ObjectDeps

  # Expiry time of this object and all of its children
  # when the object should be deleted by all replicas
  expiry: optional<Timestamp>

  # Object content
  # Encrypted using convergent encryption with ChaCha20:
  # - convergence_key: BLAKE3 derive_key ("LoFiRe Data BLAKE3 key",
  #                                       repo_pubkey + repo_secret)
  # - key: BLAKE3 keyed hash (convergence_key, plain_object)
  # - nonce: 0
  content: ObjectContent
}
type Object union { ObjectV0 }

# Repository definition
# Published in root branch, where:
# - branch_pubkey: repo_pubkey
# - branch_secret: BLAKE3 derive_key ("LoFiRe Root Branch secret",
#                                     repo_pubkey + repo_secret)
type RepositoryV0 struct {
  # Repo public key ID
  id: PubKey

  # List of branches
  branches: list<ObjectRef>

  # Whether or not to allow external requests
  allowExtRequests: bool

  # App-specific metadata
  metadata: data
}
type Repository union { RepositoryV0 }

# Add a branch to the repository
type AddBranchV0 ObjectRef
type AddBranch union { AddBranchV0 }

# Remove a branch from the repository
type RemoveBranchV0 ObjectRef
type RemoveBranch union { RemoveBranchV0 }

# Commit object types
type CommitType enum {
  REPOSITORY ADD_BRANCH REMOVE_BRANCH
  BRANCH ADD_MEMBERS END_OF_BRANCH
  TRANSACTION SNAPSHOT COMMIT_ACK
}

# Member of a branch
type MemberV0 struct {
  # Member public key ID
  id: PubKey

  # Commit types the member is allowed to publish in the branch
  commitTypes: list<CommitType>

  # Application-specific metadata
  # (role, permissions, cryptographic material, etc)
  metadata: data
}
type Member union { MemberV0 }

# Branch definition
# First commit in a branch, signed by branch key
# In case of a fork, the commit deps indicate the previous branch heads
type BranchV0 struct {
  # Branch public key ID
  id: PubKey

  # Pub/sub topic for publishing events
  topic: PubKey

  # Branch secret key
  secret: SymKey

  # Members with permissions
  members: list<Member>

  # Number of acks required for a commit to be valid
  quorum: map<CommitType><u32>

  # Delay to send explicit acks, if not enough implicit acks arrived by then
  ackDelay: RelTime

  # Tags for organizing branches within the repository
  tags: list<data>

  # App-specific metadata (validation rules, etc)
  metadata: data
}
type Branch union { BranchV0 }

# Add members to an existing branch
# If a member already exists, it overwrites the previous definition,
# in that case this can only be used for adding new permissions,
# not to remove existing ones.
# The quorum and ackDelay can be changed as well
type AddMembersV0 struct {
  # Members to add, with permissions
  members: list<Member>

  # New quorum
  quorum: optional<map<CommitType><u32>>

  # New ackDelay
  ackDelay: optional<RelTime>
}
type AddMembers union { AddMembersV0 }

# End of branch
# No more commits accepted afterwards, only acks of this commit
# May reference a fork where the branch continues
# with possibly different members, permissions, validation rules.
type EndOfBranchV0 struct {
  # (Encrypted) reference to forked branch (optional)
  fork: optional<ObjectRef>

  # Expiry time when all commits in the branch should be deleted
  expiry: Timestamp
}
type EndOfBranch union { EndOfBranchV0 }

# Transaction with CRDT operations
type TransactionV0 data
type Transaction union { TransactionV0 }

# Snapshot of a Branch
# Contains a data structure computed from the commits at the specified head.
type SnapshotV0 struct {
  # Branch heads the snapshot was made from
  heads: list<ObjectId>

  # Snapshot data structure
  content: data
}
type Snapshot union { SnapshotV0 }

# Acknowledgement of another Commit
type Ack union {
  void
}

# Commit body, corresponds to CommitType
type CommitBody union {
  | Repository | AddBranch | RemoveBranch
  | Branch | AddMembers | EndOfBranch
  | Transaction | Snapshot | Ack
}

# Commit object
# Signed by branch key, or a member key authorized to publish this commit type
type CommitV0 struct {
  content: struct {
    # Commit author
    author: PubKey

    # Author's commit sequence number in this branch
    seq: u32

    # Branch the commit belongs to
    branch: ObjectRef

    # Direct dependencies of this commit
    deps: list<ObjectRef>

    # Not directly dependent heads to acknowledge
    acks: list<ObjectRef>

    # Files the commit references
    refs: list<ObjectRef>

    # App-specific metadata (commit message, creation time, etc)
    metadata: data

    # Object with a CommitBody inside
    body: ObjectRef

    # Expiry time of the body object
    expiry: optional<Timestamp>
  }

  # Signature over the content by the author
  sig: Signature
}
type Commit union { CommitV0 }

# A file stored in an Object
type FileV0 struct {
  contentType: data
  metadata: data
  content: data
}
type File union { FileV0 }

# Immutable data
type Data union {
  | Commit | CommitBody | File
}


### COMMON DATA TYPES FOR MESSAGES ###

type PeerId PubKey

# IP address
type IPv4 data[4]
type IPv6 data[16]
type IP union { IPv4 | IPv6 }

type IPTransportProtocol enum { TLS QUIC }

type IPTransportAddr struct {
  ip: IP
  port: u16
  protocol: IPTransportProtocol
}

# Network address
type NetAddr union { IPTransportAddr }

# Bloom filter (variable size)
type BloomFilter struct {
  # Number of hash functions
  k: u8

  # Filter
  f: data
}

# Bloom filter (128 B)
# (m=1024; k=7; p=0.01; n=107)
type BloomFilter128 data[128]

# Bloom filter (1 KiB)
# (m=8192; k=7; p=0.01; n=855)
type BloomFilter1K data[1024]


### OVERLAY MESSAGES ###

# Overlay connection request
# Sent to an existing overlay member to initiate a session
type OverlayConnect union {
  void
}

# Overlay disconnection request
# Sent to a connected overlay member to terminate a session
type OverlayDisconnect union {
  void
}

# Topic advertisement by a publisher
# Flooded to all peers in overlay
# Creates subscription routing table entries
type TopicAdvert struct {
  content: struct {
    # Topic public key
    topic: PubKey

    # Peer public key
    peer: PeerId
  }

  # Signature over content by topic key
  sig: Signature
}

# Topic subscription request by a peer
# Forwarded towards all publishers along subscription routing table entries
# that are created by TopicAdverts
# Creates event routing table entries along the path
type SubReq struct {
  # Random ID generated by the subscriber
  id: u64

  # Topic public key
  topic: PubKey
}

# Topic subscription acknowledgement by a publisher
# Sent to all subscribers in an Event
type SubAck struct {
  # SubReq ID to acknowledge
  id: u64
}

# Topic unsubscription request by a subscriber
# A broker unsubscribes from upstream brokers
# when it has no more subscribers left
type UnsubReq struct {
  # Topic public key
  topic: PubKey
}

# Topic unsubscription acknowledgement
# Sent to the requestor in response to an UnsubReq
type UnsubAck struct {
  # Topic public key
  topic: PubKey
}

# Branch change notification
# Contains a chunk of a newly added Commit or File referenced by a commit.
type ChangeV0 struct {
  # Object with encrypted content
  content: Object

  # Encrypted key for the Commit object in content
  # The key is encrypted using ChaCha20:
  # - key: BLAKE3 derive_key ("LoFiRe Event ObjectRef ChaCha20 key",
  #                           branch_pubkey + branch_secret + publisher_pubkey)
  # - nonce: commit_seq
  key: optional<SymKey>
}
type Change union { ChangeV0 }

type EventBody union {
  | SubAck | Change
}

# Pub/sub event published in a topic
# Forwarded along event routing table entries
type EventV0 struct {
  content: struct {
    # Pub/sub topic
    topic: PubKey

    # Publisher pubkey hash
    # BLAKE3 keyed hash over branch member pubkey
    # - key: BLAKE3 derive_key ("LoFiRe Event publisher BLAKE3 key",
    #                           repo_pubkey + repo_secret +
    #                           branch_pubkey + branch_secret)
    publisher: Digest

    # Commit sequence number of publisher
    seq: u32

    # Event body
    body: EventBody
  }

  # Signature over content by topic key
  sig: Signature
}
type Event union { EventV0 }

# Object request by ID along the reverse path of a pub/sub topic
# from a subscriber to all publishers
type ObjectReqTopicV0 struct {
  # Topic to forward the request in
  topic: PubKey

  # List of Object IDs to request
  ids: list<ObjectId>

  # Whether or not to include all children recursively in the response
  recursive: bool

  # List of Peer IDs the request traversed so far
  path: list<PeerId>
}
type ObjectReqTopic union { ObjectReqTopicV0 }

# Object request by ID using a random walk
type ObjectReqRandomV0 struct {
  # List of Object IDs to request
  ids: list<ObjectId>

  # Whether or not to include all children recursively in the response
  recursive: bool

  # Number of random nodes to forward the request to at each step
  fanout: u8

  # List of Peer IDs the request traversed so far
  path: list<PeerId>
}
type ObjectReqRandom union { ObjectReqRandomV0 }

# Response to an Object request
# Follows request path with possible shortcuts
type ObjectResponseV0 struct {
  # Response path
  path: list<PeerId>

  # Resulting Object(s)
  payload: list<Object>
}
type ObjectResponse union { ObjectResponseV0 }

# Request latest events corresponding to the branch heads in a pub/sub topic
# In response an Event is sent for each commit chunk that belong to branch heads
# that are not present in the requestor's known heads
type BranchHeadsReqV0 struct {
  # Topic public key of the branch
  topic: PubKey

  # Known heads
  knownHeads: list<ObjectId>
}
type BranchHeadsReq union { BranchHeadsReqV0 }

# Branch synchronization request
# In response a stream of Objects are sent
# that are not present in the requestor's known heads and commits
type BranchSyncReqV0 struct {
  # Heads to request, including all their deps
  heads: list<ObjectId>

  # Fully synchronized up until these commits
  knownHeads: list<ObjectId>

  # Known commit IDs since knownHeads
  knownCommits: BloomFilter
}
type BranchSyncReq union { BranchSyncReqV0 }

# Request missed events for a pub/sub topic
# for the specified range of publisher sequence numbers
# In response an EventRes then a stream of Events are sent
type EventReqV0 struct {
  # Topic public key
  topic: PubKey

  # Events needed by the requestor
  need: list<struct {
    # Publisher ID
    publisher:  Digest

    # First sequence number to request
    from: u32

    # Last sequence number to request
    to: u32
  }>
}
type EventReq union { EventReqV0 }

# Response to an EventReq
type EventResV0 struct {
  # Events the responder has
  have: list<struct {
    # Publisher ID
    publisher: Digest

    # First sequence number to send
    from: u32

    # Last sequence number to send
    to: u32
  }>
}
type EventRes union { EventResV0 }

type OverlayRequestV0 struct {
  # Request ID
  id: u64

  # Request content
  content: union {
    | EventReq
    | BranchHeadsReq
    | BranchSyncReq
  }
}
type OverlayRequest union { OverlayRequestV0 }

type OverlayResponseV0 struct {
  # Request ID
  id: u64

  # Result
  result: u8

  # Response content
  content: optional<union {
    | EventRes
    | Object
  }>
}
type OverlayResponse union { OverlayResponseV0 }

# Peer advertisement
# Sent periodically across the overlay along random walks
type PeerAdvertV0 struct {
  # Peer advertisement content
  content: struct {
    # Peer ID
    peer: PeerId

    # Topic subscriptions
    subs: BloomFilter128

    # Network addresses
    address: list<NetAddr>

    # Version number
    version: u16

    # App-specific metadata (profile, cryptographic material, etc)
    metadata: data
  }

  # Signature over content by peer's private key
  sig: Signature

  # Time-to-live, decremented at each hop
  ttl: u8
}
type PeerAdvert union { PeerAdvertV0 }

# Overlay ID
# - for public overlays that need to be discovered by public key:
#   BLAKE3 hash over the repository public key
# - for private overlays:
#   BLAKE3 keyed hash over the repository public key
#   - key: BLAKE3 derive_key ("LoFiRe OverlayId BLAKE3 key", repo_secret)
type OverlayId Digest

# Oerlay session ID
# Used as a component for key derivation.
# Each peer generates it randomly when (re)joining the overlay network.
type SessionId u64

type OverlayMessageContent struct {
  content: union {
    | OverlayConnect | OverlayDisconnect
    | PeerAdvert | TopicAdvert
    | SubReq | UnsubReq | UnsubAck
    | Event
    | ObjectReqTopic | ObjectReqRandom
    | OverlayRequest | OverlayResponse
  }

  # Optional padding
  padding: data
}

# Overlay message
type OverlayMessageV0 struct {
  # Overlay ID
  overlay: OverlayId

  # Session ID
  session: SessionId

  # Content encrypted with ChaCha20
  # - overlay_secret: BLAKE3 derive_key ("LoFiRe Overlay BLAKE3 key",
  #                                      repo_pubkey + repo_secret)
  # - key: BLAKE3 derive_key ("LoFiRe OverlayMessage ChaCha20 key",
  #                           overlay_secret + session_id)
  # - nonce: per-session message sequence number of sending peer
  content: OverlayMessageContent

  # BLAKE3 MAC
  # BLAKE3 keyed hash over the encrypted content
  # - key:  BLAKE3 derive_key ("LoFiRe OverlayMessage BLAKE3 key",
  #                            overlay_secret + session_id)
  mac: Digest
}
type OverlayMessage union { OverlayMessageV0 }


### BROKER PROTOCOL ###

# Server hello sent upon a client connection
type ServerHelloV0 struct {
  # Nonce for ClientAuth
  nonce: data
}
type ServerHello union { ServerHelloV0 }

# Client authentication by a user's device
type ClientAuthV0 struct {
  # Authentication data
  content: struct {
    # User pub key
    user: PubKey

    # Device pub key
    device: PubKey

    # Nonce from ServerHello
    nonce: data
  }

  # Signature by device key
  sig: Signature
}
type ClientAuth union { ClientAuthV0 }

# Add user account
type AddUserV0 struct {
  content: struct {

    # User pub key
    user: PubKey
  }

  # Signature by admin key
  sig: Signature
}
type AddUser union { AddUserV0 }

# Remove user account
type DelUserV0 struct {
  content: struct {

    # User pub key
    user: PubKey
  }

  # Signature by admin key
  sig: Signature
}
type DelUser union { DelUserV0 }

# Authorize device key
type AuthorizeDeviceKeyV0 struct {
  # Authorization message content
  content: struct {
    # Device pub key
    device: PubKey
  }

  # Signature by user key
  sig: Signature
}
type AuthorizeDeviceKey union { AuthorizeDeviceKeyV0 }

# Revoke device key
type RevokeDeviceKeyV0 struct {
  # Revocation message content
  content: struct {
    # Device pub key
    device: PubKey
  }

  # Signature by user key
  sig: Signature
}
type RevokeDeviceKey union { RevokeDeviceKeyV0 }

# Request to join an overlay
type OverlayJoinV0 struct {
  # Overlay secret
  secret: SymKey

  # Peers to connect to
  peers: list<PeerAdvert>
}
type OverlayJoin union { OverlayJoinV0 }

# Request to leave an overlay
type OverlayLeave union {
  void
}

# Request an object by ID
type ObjectGetV0 struct {
  # List of Object IDs to request
  ids: list<ObjectId>

  # Whether or not to include all children recursively
  includeChildren: bool

  # Topic the object is referenced from
  topic: optional<PubKey>
}
type ObjectGet union { ObjectGetV0 }

# Request to store an object
type ObjectPutV0 struct {
  object: Object
}
type ObjectPut union { ObjectPutV0 }

# Request to pin an object
# Brokers maintain an LRU cache of objects,
# where old, unused objects might get deleted to free up space for new ones.
# Pinned objects are retained, regardless of last access.
# Note that expiry is still observed in case of pinned objects.
# To make an object survive its expiry,
# it needs to be copied with a different expiry time.
type ObjectPinV0 struct {
  id: ObjectId
}
type ObjectPin union { ObjectPinV0 }

# Request to unpin an object
type ObjectUnpinV0 struct {
  id: ObjectId
}
type ObjectUnpin union { ObjectUnpinV0 }

# Request to copy an object with a different expiry time
type ObjectCopyV0 struct {
  id: ObjectId

  expiry: optional<Timestamp>
}
type ObjectCopy union { ObjectCopyV0 }

# Request to delete an object
type ObjectDelV0 struct {
  id: ObjectId
}
type ObjectDel union { ObjectDelV0 }

# Request subscription to a topic
# For publishers a private key also needs to be provided
type TopicSubV0 struct {
  # Topic to subscribe
  topic: PubKey

  # Topic private key for publishers
  key: optional<PrivKey>
}
type TopicSub union { TopicSubV0 }

# Request unsubscription from a topic
type TopicUnsubV0 struct {
  # Topic to unsubscribe
  topic: PubKey
}
type TopicUnsub union { TopicUnsubV0 }

# Application request
type AppRequest struct {
  # Request ID
  id: u64

  # Request content
  content: union {
    | OverlayJoin | OverlayLeave
    | TopicSub | TopicUnsub
    | Event
    | ObjectGet | ObjectPut
    | ObjectPin | ObjectUnpin
    | ObjectCopy | ObjectDel
    | BranchHeadsReq | BranchSyncReq
  }
}

# Result codes
type Result enum { OK ERROR }

# Response to a request
type AppResponse struct {
  # Request ID
  id: u64

  # Result (incl but not limited to Result)
  result: u8
  content: optional<union {
    Object
  }>
}


# Application message for an overlay
type AppOverlayMessage struct {
  overlay: OverlayId
  content: union {
    | AppRequest | AppResponse
    | Event
  }
}

# Application message
type AppMessage struct {
  # Message content
  content: union {
    | ServerHello | ClientAuth
    | AddUser | DelUser
    | AuthorizeDeviceKey | RevokeDeviceKey
    | AppOverlayMessage
  }

  # Optional padding
  padding: data
}

### EXTERNAL REQUESTS ###

# Link to object(s) by ID from a repository that can be shared to non-members
# The request is sent to a node with a replica of the repository,
# The response includes the requested objects and all their children recursively,
# and optionally all object dependencies recursively.
type ExtObjectReqV0 struct {
  # Repository to request the objects from
  repo: PubKey

  # List of Object IDs to request, including their children
  ids: list<ObjectId>

  # Whether or not to include all children recursively
  includeChildren: bool

  # Expiry time after which the link becomes invalid
  expiry: optional<Timestamp>
}
type ExtObjectReq union { ExtObjectReqV0 }

# Branch heads request
type ExtBranchHeadsReq BranchHeadsReq

# Branch synchronization request
type ExtBranchSyncReq BranchSyncReq

# External request authenticated by a MAC
type ExtRequest struct {
  # Request ID
  id: u64

  # Request content
  content: union {
    | ExtObjectReq
    | ExtBranchHeadsReq
    | ExtBranchSyncReq
  }

  # BLAKE3 MAC over content
  # BLAKE3 keyed hash:
  # - key: BLAKE3 derive_key ("LoFiRe ExtRequest BLAKE3 key",
  #                           repo_pubkey + repo_secret)
  mac: Digest
}

# Response to an external request
type ExtResponse struct {
  # Request ID
  id: u64

  # Result code
  result: u8
}


### DIRECT MESSAGES ###

# Link/invitation to the repository
type RepoLinkV0 struct {
  # Repository public key ID
  id: PubKey

  # Repository secret
  secret: SymKey

  # Peers to connect to
  peers: list<PeerAdvert>
}
type RepoLink union { RepoLinkV0 }

# Owned repository with private key
type RepoKeysV0 struct {
  # Repository private key
  key: PrivKey

  # Repository secret
  secret: SymKey

  # Peers to connect to
  peers: list<PeerAdvert>
}
type RepoKeys union { RepoKeysV0 }

# Link to object(s) or to a branch from a repository
# that can be shared to non-members
type ObjectLinkV0 struct {
  # Request to send to an overlay peer
  req: ExtRequest

  # Keys for the requested objects
  keys: list<ObjectRef>
}
type ObjectLink union { ObjectLinkV0 }

### BROKER STORAGE ###

# A topic this node subscribed to in an overlay
type TopicV0 struct {
  # Topic public key ID
  id: PubKey

  # Topic private key for publishers
  privKey: optional<PrivKey>

  # Set of branch heads
  heads: list<ObjectId>

  # Number of local users that subscribed to the topic
  users: u32
}
type Topic union { TopicV0 }

# An overlay this node joined
type OverlayV0 struct {
  # Overlay ID
  id: OverlayId

  # Overlay secret
  secret: SymKey

  # Known peers with connected flag
  peers: list<PeerAdvert>

  # Topics this node subscribed to in the overlay
  topics: list<Topic>

  # Number of local users that joined the overlay
  users: u32

  # Last access by any user
  lastAccess: Timestamp
}
type Overlay union { OverlayV0 }

# User accounts
# stored as user_pubkey -> Account
type AccountV0 struct {
  # Authorized device pub keys
  authorizedKeys: list<PubKey>

  # Admins can add/remove user accounts
  admin: bool

  # Overlays joined
  overlays: list<Overlay>

  # Topics joined, with publisher flag
  topics: list<Topic>
}
type Account union { AccountV0 }
